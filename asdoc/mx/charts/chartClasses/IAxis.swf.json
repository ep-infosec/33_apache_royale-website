{ "type": "interface",
  "qname": "mx.charts.chartClasses.IAxis",
"baseInterfaceNames": [
"org.apache.royale.events.IEventDispatcher"]
,
    "description": "The IAxis class is an abstract interface for defining label, tick mark, and data positioning properties for a chart axis.  <p>Classes implement this interface to provide range definition functionality.</p>",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.charts.CategoryAxis", "mx.charts.LinearAxis"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
    "access": "read-only",
    "return": "Number",
    "qname": "baseline",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The baseline position for the axis. Some series, such as ColumnSeries or AreaSeries, use this value to define the base of a filled region when no minimum value is specified.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "write-only",
    "return": "Object",
    "qname": "chartDataProvider",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The data provider assigned to the enclosing chart. Axis types that are data provider-based can choose to inherit the data provider associated with the enclosing chart. If an axis is shared among multiple charts, the value of this property is <code>undefined</code> (most likely it will be the last data provider assigned to one of the associated charts).",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "String",
    "qname": "displayName",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The name of the axis. If set, Flex uses this name to format DataTip controls.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "String",
    "qname": "title",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The text for the title displayed along the axis.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-only",
    "return": "Number",
    "qname": "unitSize",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The size of one unit of data as represented by this axis. This value is used by various series types to help in rendering. The ColumnSeries class, for example, uses this value to determine how wide columns should be rendered. Different axis types return different values, sometimes dependent on the data being represented. The DateTimeAxis class, for example, might return the number of milliseconds in a day, or a year, depending on the data that is rendered in the chart. Because this value is dependant on collecting the represented data, custom series cannot assume this value is accurate in their <code>updateData()</code> or <code>updateMapping()</code> methods.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "method",
    "qname": "mapCache",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Converts a set of values of arbitrary type to a set of numbers that can be transformed into screen coordinates.  are read from and stored.  containing the pre-converted values.  where converted values should be stored.  are index values, and <code>false</code> if they are natural data values.",
    "tags": [
    {  "tagName": "param",
           "values": ["cache An Array of objects where converted values", "field The field of the objects in the cache Array", "convertedField The field of the objects in the cache Array", "indexValues This parameter is <code>true</code> if the values being mapped"]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "cache", "type": "Array"},
    { "name": "field", "type": "String"},
    { "name": "convertedField", "type": "String"},
    { "name": "indexValues", "type": "Boolean"}]}
  ,
  { "type": "method",
    "qname": "filterCache",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Filters a set of values of arbitrary type to a set of numbers that can be mapped.  are read from and stored.  containing the pre-filtered values.  where filtered values should be stored.",
    "tags": [
    {  "tagName": "param",
           "values": ["cache An Array of objects where converted values", "field The field of the objects in the cache Array", "convertedField The field of the objects in the cache Array"]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "cache", "type": "Array"},
    { "name": "field", "type": "String"},
    { "name": "filteredString", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "transformCache",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Maps a set of values from data space to screen space.  are read from and stored.  containing the pre-mapped values.  where mapped values should be stored.",
    "tags": [
    {  "tagName": "param",
           "values": ["cache An Array of objects where mapped values", "field The field of the objects in the cache Array", "convertedField The field of the objects in the cache Array"]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "cache", "type": "Array"},
    { "name": "field", "type": "String"},
    { "name": "convertedField", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "invertTransform",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Maps a position along the axis back to a numeric data value.  This parameter should be between 0 and 1, with 0 representing the minimum bound of the axis, and 1 the maximum.",
    "tags": [
    {  "tagName": "param",
           "values": ["value The bound of the axis."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["An object containing the transformed value."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Object",
      "params": [{ "name": "value", "type": "Number"}]}
  ,
  { "type": "method",
    "qname": "formatForScreen",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Formats values for display in DataTips. Returns a user-readable string.",
    "tags": [
    {  "tagName": "param",
           "values": ["value The value to convert to a String."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["The text of the DataTip."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "String",
      "params": [{ "name": "value", "type": "Object"}]}
  ,
  { "type": "method",
    "qname": "getLabelEstimate",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Determines the range to estimate what the axis labels should be. The axis almost immediately calls the <code>getLabels()</code> method to get the real values. The axis uses the estimated values to adjust chart margins, so any difference between the estimated labels and  actual labels (returned from the <code>getLabels()</code> method) results in scaling the labels to fit.  <p>An axis need only return the minimum and maximum labels when returning an estimate. If the label set is fairly static, without depending on the size of the axis being rendered on screen, an axis can return the entire label set from this function, and mark the estimate as accurate.</p>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["An Array of AxisLabel objects."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "mx.charts.chartClasses.AxisLabelSet",
      "params": []}
  ,
  { "type": "method",
    "qname": "preferDropLabels",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Determines how the axis handles overlapping labels. Typically, numeric ranges return <code>true</code>, while discrete value-based ranges do not. You can can override this property by setting it directly on the axis.  otherwise, <code>false</code>.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["<code>true</code> if labels can be dropped without loss of data;"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Boolean",
      "params": []}
  ,
  { "type": "method",
    "qname": "getLabels",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Gets the labels text that is rendered. When Flex calls this method, the axis has already determined the minimum length of the label.  The axis can be longer than this value, but not shorter.",
    "tags": [
    {  "tagName": "param",
           "values": ["minimumAxisLength The minimum length of the axis, in pixels."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["An array of AxisLabel objects."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "mx.charts.chartClasses.AxisLabelSet",
      "params": [{ "name": "minimumAxisLength", "type": "Number"}]}
  ,
  { "type": "method",
    "qname": "reduceLabels",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Invoked when an AxisRenderer is unable to cleanly render the labels without overlap, and would like the Axis object to reduce the set of labels. The method is passed the two labels that are overlapping.    the number of labels.",
    "tags": [
    {  "tagName": "param",
           "values": ["intervalStart The start of the interval where labels overlap.", "intervalEnd The end of the interval where labels overlap."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["A new label set that resolves the overlap by reducing"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "mx.charts.chartClasses.AxisLabelSet",
      "params": [{ "name": "intervalStart", "type": "mx.charts.AxisLabel"},
    { "name": "intervalEnd", "type": "mx.charts.AxisLabel"}]}
  ,
  { "type": "method",
    "qname": "registerDataTransform",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Each DataTransform that makes use of an axis registers itself with that axis. The axis is responsible for informing the transform when its relevant values have changed. It should also request values from the transform when it wants to autogenerate minimum and maximum values.",
    "tags": [
    {  "tagName": "param",
           "values": ["transform The DataTransform to register.", "dimensionName The name of the dimension."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "transform", "type": "mx.charts.chartClasses.DataTransform"},
    { "name": "dimensionName", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "unregisterDataTransform",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Each DataTransform that makes use of an axis registers itself with that axis. The axis is responsible for informing the transform when its relevant values have changed. It should also request values from the transform when it wants to autogenerate minimum and maximum values.",
    "tags": [
    {  "tagName": "param",
           "values": ["transform The DataTransform to unregister."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": [{ "name": "transform", "type": "mx.charts.chartClasses.DataTransform"}]}
  ,
  { "type": "method",
    "qname": "dataChanged",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Triggers events that inform the range object when the chart data has changed.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": []}
  ,
  { "type": "method",
    "qname": "update",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Updates the chart. This can be called multiple times per frame.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": []}
  ]
  }
