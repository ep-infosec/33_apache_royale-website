{ "type": "class",
  "qname": "mx.collections.ArrayList",
  "baseClassname": "org.apache.royale.events.EventDispatcher"
  ,
    "description": "The ArrayList class is a simple implementation of IList that uses a backing Array as the source of the data.  Items in the backing Array can be accessed and manipulated using the methods and properties of the <code>IList</code> interface. Operations on an ArrayList instance modify the data source; for example, if you use the <code>removeItemAt()</code> method on an ArrayList, you remove the item from the underlying Array.  This base class will not throw ItemPendingErrors but it is possible that a subclass might.  <pre>\\n &lt;mx:ArrayList\\n <b>Properties</b>\\n source=&quot;null&quot;\\n /&gt;\\n </pre>",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "method",
        "qname": "mx.collections.ArrayList",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Construct a new ArrayList using the specified array as its source. If no source is specified an empty array will be used.",
        "tags": [
        {  "tagName": "param",
               "values": ["source The Array to use as a source for the ArrayList."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "source", "type": "Array"}]}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "length",
        "namespace": "public",
        "bindable": ["collectionChange"],
        "details": [],
        "deprecated": {},
          "description": "Get the number of items in the list.  An ArrayList should always know its length so it shouldn't return -1, though a subclass may override that behavior.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["int representing the length of the source."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "Array",
        "qname": "source",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The source array for this ArrayList. Any changes done through the IList interface will be reflected in the source array. If no source array was supplied the ArrayList will create one internally. Changes made directly to the underlying Array (e.g., calling <code>theList.source.pop()</code> will not cause <code>CollectionEvents</code> to be dispatched.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["An Array that represents the underlying source."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "String",
        "qname": "uid",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Provides access to the unique id for this list.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["String representing the internal uid."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "getItemAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Get the item at the specified index.  to fetch during the request should the item not be local. loaded from a remote location",
        "tags": [
        {  "tagName": "param",
               "values": ["index the index in the list from which to retrieve the item", "prefetch int indicating both the direction and amount of items"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "throws",
               "values": ["ItemPendingError if the data for that index needs to be", "RangeError if the index &lt; 0 or index &gt;= length"]},
            {  "tagName": "return",
               "values": ["the item at that index, null if there is none"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "index", "type": "int"},
        { "name": "prefetch", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "setItemAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Place the item at the specified index. If an item was already at that index the new item will replace it and it will be returned.",
        "tags": [
        {  "tagName": "param",
               "values": ["item the new value for the index", "index the index at which to place the item"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "throws",
               "values": ["RangeError if index is less than 0 or greater than or equal to length"]},
            {  "tagName": "return",
               "values": ["the item that was replaced, null if none"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "item", "type": "Object"},
        { "name": "index", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "addItem",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Add the specified item to the end of the list. Equivalent to addItemAt(item, length);",
        "tags": [
        {  "tagName": "param",
               "values": ["item the item to add"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "addItemAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Add the item at the specified index. Any item that was after this index is moved out by one.",
        "tags": [
        {  "tagName": "param",
               "values": ["item the item to place at the index", "index the index at which to place the item"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "throws",
               "values": ["RangeError if index is less than 0 or greater than the length"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"},
        { "name": "index", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "addAll",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "copy",
               "values": ["mx.collections.ListCollectionView#addAll()"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "addList", "type": "mx.collections.IList"}]}
      ,
      { "type": "method",
        "qname": "addAllAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "copy",
               "values": ["mx.collections.ListCollectionView#addAllAt()"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "addList", "type": "mx.collections.IList"},
        { "name": "index", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "getItemIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Return the index of the item if it is in the list such that getItemAt(index) == item. Note that in this implementation the search is linear and is therefore O(n).",
        "tags": [
        {  "tagName": "param",
               "values": ["item the item to find"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["the index of the item, -1 if the item is not in the list."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "int",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "removeItem",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Removes the specified item from this list, should it exist.",
        "tags": [
        {  "tagName": "param",
               "values": ["item Object reference to the item that should be removed."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["Boolean indicating if the item was removed."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "removeItemAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Remove the item at the specified index and return it. Any items that were after this index are now one index earlier.",
        "tags": [
        {  "tagName": "param",
               "values": ["index The index from which to remove the item."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "throws",
               "values": ["RangeError if index &lt; 0 or index &gt;= length."]},
            {  "tagName": "return",
               "values": ["The item that was removed."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "index", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "removeAll",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Remove all items from the list.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "itemUpdated",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Notify the view that an item has been updated. This is useful if the contents of the view do not implement <code>IEventDispatcher</code>. If a property is specified the view may be able to optimize its notification mechanism. Otherwise it may choose to simply refresh the whole view.   specifying the property that was updated.  (If property was null, this can be the old value of the item.)  (If property was null, there's no need to specify this as the item is assumed to be the new value.)",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.events.CollectionEvent", "mx.core.IPropertyChangeNotifier", "mx.events.PropertyChangeEvent"]},
            {  "tagName": "param",
               "values": ["item The item within the view that was updated.", "property A String, QName, or int", "oldValue The old value of that property.", "newValue The new value of that property."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"},
        { "name": "property", "type": "Object"},
        { "name": "oldValue", "type": "Object"},
        { "name": "newValue", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "toArray",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Return an Array that is populated in the same order as the IList implementation.  implementation.  from a remote location",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "throws",
               "values": ["ItemPendingError if the data is not yet completely loaded"]},
            {  "tagName": "return",
               "values": ["An Array populated in the same order as the IList"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Array",
          "params": []}
      ,
      { "type": "method",
        "qname": "toString",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Pretty prints the contents of this ArrayList to a string and returns it.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["A String containing the contents of the ArrayList."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": []}
      ,
      { "type": "method",
        "qname": "itemUpdateHandler",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Called when any of the contained items in the list dispatches a <code>PropertyChangeEvent</code>. Wraps it in a <code>CollectionEventKind.UPDATE</code> object.",
        "tags": [
        {  "tagName": "param",
               "values": ["event The event object for the <code>PropertyChangeEvent</code>."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.PropertyChangeEvent"}]}
      ,
      { "type": "method",
        "qname": "startTrackUpdates",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If the item is an IEventDispatcher, watch it for updates. This method is called by the <code>addItemAt()</code> method, and when the source is initially assigned.",
        "tags": [
        {  "tagName": "param",
               "values": ["item The item passed to the <code>addItemAt()</code> method."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "stopTrackUpdates",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "If the item is an IEventDispatcher, stop watching it for updates. This method is called by the <code>removeItemAt()</code> and <code>removeAll()</code> methods, and before a new source is assigned.",
        "tags": [
        {  "tagName": "param",
               "values": ["item The item passed to the <code>removeItemAt()</code> method."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"}]}
      ]
  ,
  "events": [
  { "qname": "collectionChange",
        "type": "mx.events.CollectionEvent"
      ,
          "description": "Dispatched when the IList has been updated in some way.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.CollectionEvent.COLLECTION_CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
