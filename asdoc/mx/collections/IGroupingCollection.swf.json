{ "type": "interface",
  "qname": "mx.collections.IGroupingCollection",
"baseInterfaceNames": [
"mx.collections.IHierarchicalData"]
,
    "description": "The IGroupingCollection interface defines the interface required to create grouped data from flat data.",
  "tags": [
  {  "tagName": "see",
         "values": ["mx.collections.GroupingCollection", "mx.controls.AdvancedDataGrid"]},
      {  "tagName": "playerversion",
         "values": ["Flash 9", "AIR 1.1"]},
      {  "tagName": "productversion",
         "values": ["Flex 3"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
    "access": "read-write",
    "return": "mx.collections.Grouping",
    "qname": "grouping",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The Grouping object applied to the source data. Setting this property does not automatically refresh the view; therefore, you must call the <code>refresh()</code> method after setting this property.  <p>Note: The Flex implementations of IGroupingCollection retrieve all items from a remote location before executing grouping.</p>",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "method",
    "qname": "refresh",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Applies the grouping to the view. The IGroupingCollection does not detect changes to a group automatically, so you must call the <code>refresh()</code> method to update the view after setting the <code>group</code> property.  <p>The <code>refresh()</code> method can be applied asynchronously by calling <code>refresh(true)</code>.</p>  <p>When <code>refresh()</code> is called synchronously, a client should wait for a CollectionEvent event with the value of the <code>kind</code> property set to <code>CollectionEventKind.REFRESH</code> to ensure that the <code>refresh()</code> method completed.</p>  By default it is <code>false</code> denoting synchronous refresh.  and <code>false</code> if the refresh is incomplete, which can mean that items are still pending.",
    "tags": [
    {  "tagName": "param",
           "values": ["async If <code>true</code>, defines the refresh to be asynchronous."]},
        {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "return",
           "values": ["<code>true</code> if the <code>refresh()</code> method completed,"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Boolean",
      "params": [{ "name": "async", "type": "Boolean"}]}
  ,
  { "type": "method",
    "qname": "cancelRefresh",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "If the refresh is performed asynchronously, cancels the refresh operation and stops the building of the groups.  This method only cancels the refresh if it is initiated by a call to the <code>refresh()</code> method with an argument of <code>true</code>, corresponding to an asynchronous refresh.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 9", "AIR 1.1"]},
        {  "tagName": "productversion",
           "values": ["Flex 3"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": []}
  ]
  }
