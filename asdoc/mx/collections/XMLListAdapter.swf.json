{ "type": "class",
  "qname": "mx.collections.XMLListAdapter",
  "baseClassname": "org.apache.royale.events.EventDispatcher"
  ,
    "description": "A simple implementation of IList that uses a backing XMLList. No ItemPendingErrors since the data is always local.",
  "tags": [
  {  "tagName": "private",
         "values": []}  ],
  "members": [
  { "type": "method",
        "qname": "mx.collections.XMLListAdapter",
        "namespace": "",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Construct a new XMLListAdapter using the specified XMLList as its source. If no source is specified an empty XMLList will be used.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "",
          "params": [{ "name": "source", "type": "XMLList"}]}
      ,
      { "type": "accessor",
        "access": "read-only",
        "return": "int",
        "qname": "length",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The number of items in this list.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["-1 if the length is unknown while 0 means no items"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "accessor",
        "access": "read-write",
        "return": "XMLList",
        "qname": "source",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "The source XMLList for this XMLListAdapter. Any changes done through the IList interface will be reflected in the source XMLList. If no source XMLList was supplied the XMLListAdapter will create one internally. Changes made directly to the underlying XMLList (e.g., calling <code>delete theList[someIndex]</code> will not cause <code>CollectionEvents</code> to be dispatched.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]},
      { "type": "method",
        "qname": "addItem",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Add the specified item to the end of the list. Equivalent to addItemAt(item, length);",
        "tags": [
        {  "tagName": "param",
               "values": ["item the item to add"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "addItemAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Add the item at the specified index.  Any item that was after this index is moved out by one.  If the list is shorter than the specified index it will grow to accomodate the new item.",
        "tags": [
        {  "tagName": "param",
               "values": ["item the item to place at the index", "index the index at which to place the item"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "throws",
               "values": ["RangeError if index is less than 0"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"},
        { "name": "index", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "getItemAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Get the item at the specified index.  to fetch during the request should the item not be local. loaded from a remote location",
        "tags": [
        {  "tagName": "param",
               "values": ["index the index in the list from which to retrieve the item", "prefetch int indicating both the direction and amount of items"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "throws",
               "values": ["ItemPendingError if the data for that index needs to be", "RangeError if the index < 0 or index >= length"]},
            {  "tagName": "return",
               "values": ["the item at that index, null if there is none"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "index", "type": "int"},
        { "name": "prefetch", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "getItemIndex",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Return the index of the item if it is in the list such that getItemAt(index) == item.  Note: unlike IViewCursor.findXXX <code>getItemIndex</code> cannot take a representative object, it is searching for an exact match.",
        "tags": [
        {  "tagName": "param",
               "values": ["item the item to find"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "return",
               "values": ["the index of the item, -1 if the item is not in the list."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "int",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "itemUpdated",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Notify the view that an item has been updated.  This is useful if the contents of the view do not implement <code>IEventDispatcher</code> and dispatches a <code>PropertyChangeEvent</code>.  If a property is specified the view may be able to optimize its notification mechanism. Otherwise it may choose to simply refresh the whole view.   specifying the property that was updated.  (If property was null, this can be the old value of the item.)  (If property was null, there's no need to specify this as the item is assumed to be the new value.)",
        "tags": [
        {  "tagName": "see",
               "values": ["mx.events.CollectionEvent", "mx.core.IPropertyChangeNotifier", "mx.events.PropertyChangeEvent"]},
            {  "tagName": "param",
               "values": ["item The item within the view that was updated.", "property A String, QName, or int", "oldValue The old value of that property.", "newValue The new value of that property."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"},
        { "name": "property", "type": "Object"},
        { "name": "oldValue", "type": "Object"},
        { "name": "newValue", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "removeAll",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Remove all items from the list.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "removeItem",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Removes the specified item from this list, should it exist. Relies on ArrayList implementation",
        "tags": [
        {  "tagName": "param",
               "values": ["item Object reference to the item that should be removed."]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Apache Flex 4.10"]},
            {  "tagName": "return",
               "values": ["Boolean indicating if the item was removed."]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": [{ "name": "item", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "removeItemAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Remove the item at the specified index and return it.  Any items that were after this index are now one index earlier.",
        "tags": [
        {  "tagName": "param",
               "values": ["index the index from which to remove the item"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "throws",
               "values": ["RangeError is index is less than 0 or greater than length"]},
            {  "tagName": "return",
               "values": ["the item that was removed"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "index", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "setItemAt",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Place the item at the specified index.  If an item was already at that index the new item will replace it and it will be returned. If the list is shorter than the specified index it will grow to to accomodate the new item.",
        "tags": [
        {  "tagName": "param",
               "values": ["item the new value for the index", "index the index at which to place the item"]},
            {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "throws",
               "values": ["RangeError if index is less than 0"]},
            {  "tagName": "return",
               "values": ["the item that was replaced, null if none"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Object",
          "params": [{ "name": "item", "type": "Object"},
        { "name": "index", "type": "int"}]}
      ,
      { "type": "method",
        "qname": "toArray",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Return an Array that is populated in the same order as the IList implementation.  from a remote location",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "throws",
               "values": ["ItemPendingError if the data is not yet completely loaded"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Array",
          "params": []}
      ,
      { "type": "method",
        "qname": "toString",
        "namespace": "public",
        "bindable": [],
        "details": ["override"],
        "deprecated": {},
          "description": "Pretty prints the contents of this XMLListAdapter to a string and returns it.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "String",
          "params": []}
      ,
      { "type": "method",
        "qname": "busy",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "True if we're processing a addItem or removeItem call",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "Boolean",
          "params": []}
      ,
      { "type": "method",
        "qname": "enableEvents",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Enables event dispatch for this list.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "disableEvents",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Disables event dispatch for this list. To re-enable events call enableEvents(), enableEvents() must be called a matching number of times as disableEvents().",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": []}
      ,
      { "type": "method",
        "qname": "itemUpdateHandler",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Called whenever any of the contained items in the list fires a <code>PropertyChangeEvent</code>. Wraps it in a CollectionEventKind.UPDATE.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "event", "type": "mx.events.PropertyChangeEvent"}]}
      ,
      { "type": "method",
        "qname": "xmlNotification",
        "namespace": "public",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "Called whenever an XML object contained in our list is updated in some way.  The initial implementation stab is very lenient, any changeType will cause an update no matter how much further down in a hierarchy.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "currentTarget", "type": "Object"},
        { "name": "type", "type": "String"},
        { "name": "target", "type": "Object"},
        { "name": "value", "type": "Object"},
        { "name": "detail", "type": "Object"}]}
      ,
      { "type": "method",
        "qname": "startTrackUpdates",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "This is called by addItemAt and when the source is initially assigned.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"},
        { "name": "uid", "type": "String"}]}
      ,
      { "type": "method",
        "qname": "stopTrackUpdates",
        "namespace": "protected",
        "bindable": [],
        "details": [],
        "deprecated": {},
          "description": "This is called by removeItemAt, removeAll, and before a new source is assigned.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ],
          "return": "void",
          "params": [{ "name": "item", "type": "Object"}]}
      ]
  ,
  "events": [
  { "qname": "collectionChange",
        "type": "mx.events.CollectionEvent"
      ,
          "description": "Dispatched when the IList has been updated in some way.",
        "tags": [
        {  "tagName": "playerversion",
               "values": ["Flash 9", "AIR 1.1"]},
            {  "tagName": "eventType",
               "values": ["mx.events.CollectionEvent.COLLECTION_CHANGE"]},
            {  "tagName": "productversion",
               "values": ["Flex 3"]},
            {  "tagName": "langversion",
               "values": ["3.0"]}  ]}]
  }
