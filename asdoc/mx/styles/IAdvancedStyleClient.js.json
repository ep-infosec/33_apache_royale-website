{ "type": "interface",
  "qname": "mx.styles.IAdvancedStyleClient",
"baseInterfaceNames": [
"mx.styles.IStyleClient"]
,
    "description": "This interface describes the advanced properties that a component must implement to fully participate in the advanced style subsystem.",
  "tags": [
  {  "tagName": "playerversion",
         "values": ["Flash 10", "AIR 1.5"]},
      {  "tagName": "productversion",
         "values": ["Flex 4"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
  "members": [
  { "type": "accessor",
    "access": "read-only",
    "return": "String",
    "qname": "id",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The identity of the component.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10", "AIR 1.5"]},
        {  "tagName": "productversion",
           "values": ["Flex 4"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "accessor",
    "access": "read-write",
    "return": "mx.styles.IAdvancedStyleClient",
    "qname": "styleParent",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "The parent of this <code>IAdvancedStyleClient</code>..  Typically, you do not assign this property directly. It is set by the <code>addChild, addChildAt, removeChild, and removeChildAt</code> methods of the <code>flash.display.DisplayObjectContainer</code> and  the <code>mx.core.UIComponent.addStyleClient()</code>  and the <code>mx.core.UIComponent.removeStyleClient()</code> methods.  If it is assigned a value directly, without calling one of the above mentioned methods the instance of the class that implements this interface will not inherit styles from the UIComponent or DisplayObject. Also if assigned a value directly without, first removing the object from the current parent with the remove methods listed above, a memory leak could occur.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10", "AIR 1.5"]},
        {  "tagName": "productversion",
           "values": ["Flex 4"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ]},
  { "type": "method",
    "qname": "stylesInitialized",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Flex calls the <code>stylesInitialized()</code> method when the styles for a component are first initialized.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10", "AIR 1.5"]},
        {  "tagName": "productversion",
           "values": ["Flex 4"]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "void",
      "params": []}
  ,
  { "type": "method",
    "qname": "matchesCSSState",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Returns <code>true</code> if <code>cssState</code> matches <code>currentCSSState</code>. Typically, you do not call this method directly. It is called by the <code>mx.styles.CSSCondition.matchesStyleClient()</code> method.  <p>Note Spark components use their skin state as the pseudo state. Halo components use the <code>currentState</code> property.</p>  It represents the current state of this component used to match CSS pseudo-selectors.  By default, <code>currentCSSState</code> is the same as <code>currentState</code>. If no state exists, return null.",
    "tags": [
    {  "tagName": "param",
           "values": ["cssState A possible value of <code>CSSCondition.value</code>."]},
        {  "tagName": "playerversion",
           "values": ["Flash 10", "AIR 1.5"]},
        {  "tagName": "productversion",
           "values": ["Flex 4"]},
        {  "tagName": "return",
           "values": ["<code>true</code> if <code>cssState</code> matches <code>currentCSSState</code>."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Boolean",
      "params": [{ "name": "cssState", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "matchesCSSType",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Determines whether this instance is the same as, or is a subclass of, the given type. Typically, you do not call this method directly. It is called by the <code>mx.styles.CSSCondition.matchesStyleClient()</code> method.",
    "tags": [
    {  "tagName": "param",
           "values": ["cssType A CSSSelector object."]},
        {  "tagName": "playerversion",
           "values": ["Flash 10", "AIR 1.5"]},
        {  "tagName": "productversion",
           "values": ["Flex 4"]},
        {  "tagName": "return",
           "values": ["<code>true</code> if <code>cssType</code> is in the hierarchy of qualified type selectors."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Boolean",
      "params": [{ "name": "cssType", "type": "String"}]}
  ,
  { "type": "method",
    "qname": "hasCSSState",
    "namespace": "public",
    "bindable": [],
    "details": [],
    "deprecated": {},
      "description": "Returns <code>true</code> if <code>currentCSSState</code> is not <code>null</code>. Typically, you do not call this method directly. It is called by the <code>mx.styles.CSSCondition.matchesStyleClient()</code> method.  <p>Note Spark components use their skin state as the pseudo state. Halo components use the <code>currentState</code> property.</p>  By default, <code>currentCSSState</code> is the same as <code>currentState</code>. If no state exists, return false.",
    "tags": [
    {  "tagName": "playerversion",
           "values": ["Flash 10", "AIR 2.5"]},
        {  "tagName": "productversion",
           "values": ["Flex 4.6"]},
        {  "tagName": "return",
           "values": ["<code>true</code> if <code>currentCSSState</code> is not <code>null</code>."]},
        {  "tagName": "langversion",
           "values": ["3.0"]}  ],
      "return": "Boolean",
      "params": []}
  ]
  }
