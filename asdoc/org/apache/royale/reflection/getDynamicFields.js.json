{ "type": "method",
  "qname": "org.apache.royale.reflection.getDynamicFields",
  "namespace": "public",
  "bindable": [],
  "details": [],
  "deprecated": {},
    "description": "A utility method to check if an object is dynamic (i.e. can have non-sealed members added or deleted) Note that static class objects are always dynamic, as are (static) Interface Objects   and returns true to include that specific field in the results. If it returns false, that property is excluded. Defaults to null, which applies no filtering and returns all detected properties. before inspecting it for dynamic properties. This should normally be left at its default value of true. If it is known that the object is dynamic before calling this method, setting this to false could improve performance in performance-sensitive code. The results of calling this method on non-dynamic objects may be less reliable or less consistent across target platforms if checkFirst is false",
  "tags": [
  {  "tagName": "param",
         "values": ["inspect the class or instance to check for dynamic fields", "includePredicate an optional function for which takes a single String argument", "checkFirst an optional check to verify that the inspect parameter is dynamic", "numericFields if true, numeric fields will be returned as numeric values"]},
      {  "tagName": "playerversion",
         "values": ["Flash 10.2", "AIR 2.6"]},
      {  "tagName": "productversion",
         "values": ["Royale 0.0"]},
      {  "tagName": "royaleignorecoercion",
         "values": ["Map"]},
      {  "tagName": "return",
         "values": ["the dynamic fields as Strings in an Array"]},
      {  "tagName": "langversion",
         "values": ["3.0"]}  ],
    "return": "Array",
    "params": [{ "name": "inspect", "type": "Object"},
  { "name": "includePredicate", "type": "Function"},
  { "name": "checkFirst", "type": "Boolean"},
  { "name": "numericFields", "type": "Boolean"}]}
